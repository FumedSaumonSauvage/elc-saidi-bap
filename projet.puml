@startuml projet_bap


package tk{
    class Application {
        - root: tk.Tk
        - interface: InterfaceUtilisateur
        - logique: LogiqueMetier
        + __init__()
    }
}

class main{
    + main()
}

package mod{

    class IdCooker{
        + _instance: IdCooker
        - __new__()
        - __init__()
        + generate_id()
    }

    class InterfaceUtilisateur {
        - master: tk.Tk
        + canvas: tk.Canvas
        + toolbar_frame: tk.Frame
        + bouton_noeud: tk.Button
        + bouton_arc: tk.Button
        + bouton_effacer: tk.Button
        + bouton_sauvegarder: tk.Button
        + bouton_charger: tk.Button
        + __init__(master: tk.Tk)
    }

    class LogiqueMetier {
        - canvas: tk.Canvas
        - noeuds: dict
        - arcs: list
        - debut_arc: int
        - arc_temporaire: int
        - mode: str
        - nombre_colonies: str
        + __init__(canvas: tk.Canvas)
        + ajouter_noeud(event)
        + dessiner_arc(event)
        + afficher_arcs()
        + afficher_noeuds()
        + sauvegarder()
        + charger_graphe()
        + effacer_graphe()
        + afficher_ligne_bus(graphe_ligne, couleur, offset: int)
        + afficher_tous_bus()
        + afficher_legende(couleurs, lignes)
        + run_optimisation(debug: bool)
    }

    class optimizer {
        - _instance: static optimizer
        + nb_lignes_bus: int
        + global_graph: Graph
        + lignes_bus: dict
        + initialized: bool
        + initialiser_attributs(...): void
        + get_ligne_bus(id: int): BusGraph
        + get_all_lignes_bus(): dict
        + test_efficacite(): int
        + test_couverture_bus(): bool
        + run(): void
        + mÃ j_interface(): void
    }

    class BusGraph {
        - noeuds: dict
        - arcs: list
        + __init__()
        + add_node(node_id, x, y)
        + add_edge(node1, node2)
        + get_nodes() : dict
        + get_travel_time(node1, node2) : float
        + exists_edge(node1, node2) : bool
        + from_dict(nodes_dict, arcs_list)
    }

    class GlobalGraph {
        - nodes: dict
        - arcs: list
        - graphes: dict
        + __init__(nodes, arcs)
        + exists_edge(node1, node2) : bool
        + from_dict(graph_dict)
        + are_arcs_contingent(arc1, arc2) : bool
        + get_contingent_nodes(noeud) : list
    }

    class Ant_Colony {
        + id_colony: int
        + nb_fourmis: int
        + graph: GlobalGraph
        + fourmis: list
        + pheromones: dict
        + alpha: float
        + beta: float
        + rho: float
        + q0: float
        + qte_pheromones: float
        + __init__(id_colony: int, nb_fourmis: int, graph: dict, ...)
    }

    class Ant {
        + objectif: bool
        + noeud_actuel: int
        + noeud_cible: int
        + id_fourmi: int
        + visites: dict
        + a_visiter: set
        + colonie: Ant_Colony
        + tps_trajet: float
        + __init__(id_fourmi, noeud_initial, noeud_cible, colonie): void
        + voisins(): list
        + choix_noeud(): int
        + deplacement(): void
    }

}

Application "1" -- "1" InterfaceUtilisateur
Application "1" -- "1" LogiqueMetier
InterfaceUtilisateur -- "1" tk.Canvas
LogiqueMetier -- "1" tk.Canvas
main -up-> Application : main
optimizer -up-> "1" optimizer : instance
IdCooker -up-> "1" IdCooker : instance
optimizer -- "1" LogiqueMetier
optimizer -- "*" BusGraph
optimizer -- "1" GlobalGraph

Ant_Colony "1" -- "*" Ant
Ant_Colony "1" -- "1" GlobalGraph

@enduml